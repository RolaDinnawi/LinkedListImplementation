public class Driver {
    public static void main(String[] args) {
        LinkedList L = new LinkedList();
        int[] num = {1, 3, 7, 4, 3, 7, 2};
        for (int i = 0; i < num.length; i++)
            L.addBack(num[i]);
        L.printList();
        deleteAll(L, 7);
        L.printList();

        LinkedList L2 = new LinkedList();
        int[] num2 = {2, 4, 5, 8, 1, 5, 3};
        for (int i = 0; i < num2.length; i++)
            L2.addBack(num2[i);
        LinkedList indexOf5 = indexesOf(L2, 5);
        indexOf5.printList();

        LinkedList L3 = new LinkedList();
        int[] num3 = {1, 5, 7, 8, 9};
        for (int i = 0; i < num3.length; i++)
            L3.addBack(num3[i]);
        L3.printList();
        reverse(L3);
        L3.printList();

        LinkedList intersected = intersection(L3, L2);
        intersected.printList();

        LinkedList united = union(L, L2);
        united.printList();
    }

    public static void deleteAll(LinkedList L, int v) {
        while (L.search(v)) {
            L.delete(v);
        }
    }

    public static LinkedList indexesOf(LinkedList L, int num) {
        LinkedList indexList = new LinkedList();
        int i = 0;
        Node current = L.getHead();
        while (current != null) {
            if (current.value == num) {
                indexList.addBack(i);
            }
            i++;
            current = current.next;
        }
        return indexList;
    }

    public static void reverse(LinkedList L) {
        Node prev = null;
        Node current = L.getHead();
        Node next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        L.setHead(prev);
    }

    public static LinkedList union(LinkedList L1, LinkedList L2) {
        LinkedList sorted = join(L1, L2);
        LinkedList unique = new LinkedList();

        // Traverse the sorted list and add unique elements to the result
        Node current = sorted.getHead();
        while (current != null) {
            if (!unique.search(current.value)) {
                unique.addBack(current.value);
            }
            current = current.next;
        }

        return unique;
    }

    public static LinkedList join(LinkedList L1, LinkedList L2) {
        LinkedList sorted = new LinkedList();
        Node current1 = L1.getHead();
        Node current2 = L2.getHead();

        while (current1 != null && current2 != null) {
            if (current1.value < current2.value) {
                sorted.addBack(current1.value);
                current1 = current1.next;
            } else {
                sorted.addBack(current2.value);
                current2 = current2.next;
            }
        }

        // Append remaining elements from both lists, if any
        while (current1 != null) {
            sorted.addBack(current1.value);
            current1 = current1.next;
        }
        while (current2 != null) {
            sorted.addBack(current2.value);
            current2 = current2.next;
        }

        return sorted;
    }

    public static LinkedList intersection(LinkedList L1, LinkedList L2) {
        LinkedList intersected = new LinkedList();
        Node current1 = L1.getHead();

        while (current1 != null) {
            if (L2.search(current1.value)) {
                intersected.addBack(current1.value);
            }
            current1 = current1.next;
        }

        return intersected;
    }
}
